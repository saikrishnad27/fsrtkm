// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package AOSProject_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenClient interface {
	CreateToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*CResponse, error)
	WriteToken(ctx context.Context, in *Wkey, opts ...grpc.CallOption) (*WRResponse, error)
	ReadToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*WRResponse, error)
	DropToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DResponse, error)
	WriteARToken(ctx context.Context, in *ARWrite, opts ...grpc.CallOption) (*ARWriteRes, error)
	ReadARToken(ctx context.Context, in *ARRead, opts ...grpc.CallOption) (*ARReadRes, error)
	RollbackARToken(ctx context.Context, in *ARRollbackReq, opts ...grpc.CallOption) (*ARWriteRes, error)
	RollbackDropARToken(ctx context.Context, in *ARRollbackReq, opts ...grpc.CallOption) (*ARWriteRes, error)
}

type tokenClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenClient(cc grpc.ClientConnInterface) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) CreateToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*CResponse, error) {
	out := new(CResponse)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/createToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) WriteToken(ctx context.Context, in *Wkey, opts ...grpc.CallOption) (*WRResponse, error) {
	out := new(WRResponse)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/writeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) ReadToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*WRResponse, error) {
	out := new(WRResponse)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/readToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) DropToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DResponse, error) {
	out := new(DResponse)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/dropToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) WriteARToken(ctx context.Context, in *ARWrite, opts ...grpc.CallOption) (*ARWriteRes, error) {
	out := new(ARWriteRes)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/writeARToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) ReadARToken(ctx context.Context, in *ARRead, opts ...grpc.CallOption) (*ARReadRes, error) {
	out := new(ARReadRes)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/readARToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RollbackARToken(ctx context.Context, in *ARRollbackReq, opts ...grpc.CallOption) (*ARWriteRes, error) {
	out := new(ARWriteRes)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/rollbackARToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RollbackDropARToken(ctx context.Context, in *ARRollbackReq, opts ...grpc.CallOption) (*ARWriteRes, error) {
	out := new(ARWriteRes)
	err := c.cc.Invoke(ctx, "/AOSProject_2.Token/rollbackDropARToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
// All implementations must embed UnimplementedTokenServer
// for forward compatibility
type TokenServer interface {
	CreateToken(context.Context, *Key) (*CResponse, error)
	WriteToken(context.Context, *Wkey) (*WRResponse, error)
	ReadToken(context.Context, *Key) (*WRResponse, error)
	DropToken(context.Context, *Key) (*DResponse, error)
	WriteARToken(context.Context, *ARWrite) (*ARWriteRes, error)
	ReadARToken(context.Context, *ARRead) (*ARReadRes, error)
	RollbackARToken(context.Context, *ARRollbackReq) (*ARWriteRes, error)
	RollbackDropARToken(context.Context, *ARRollbackReq) (*ARWriteRes, error)
	mustEmbedUnimplementedTokenServer()
}

// UnimplementedTokenServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (UnimplementedTokenServer) CreateToken(context.Context, *Key) (*CResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedTokenServer) WriteToken(context.Context, *Wkey) (*WRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToken not implemented")
}
func (UnimplementedTokenServer) ReadToken(context.Context, *Key) (*WRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadToken not implemented")
}
func (UnimplementedTokenServer) DropToken(context.Context, *Key) (*DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropToken not implemented")
}
func (UnimplementedTokenServer) WriteARToken(context.Context, *ARWrite) (*ARWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteARToken not implemented")
}
func (UnimplementedTokenServer) ReadARToken(context.Context, *ARRead) (*ARReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadARToken not implemented")
}
func (UnimplementedTokenServer) RollbackARToken(context.Context, *ARRollbackReq) (*ARWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackARToken not implemented")
}
func (UnimplementedTokenServer) RollbackDropARToken(context.Context, *ARRollbackReq) (*ARWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDropARToken not implemented")
}
func (UnimplementedTokenServer) mustEmbedUnimplementedTokenServer() {}

// UnsafeTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServer will
// result in compilation errors.
type UnsafeTokenServer interface {
	mustEmbedUnimplementedTokenServer()
}

func RegisterTokenServer(s grpc.ServiceRegistrar, srv TokenServer) {
	s.RegisterService(&Token_ServiceDesc, srv)
}

func _Token_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/createToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).CreateToken(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_WriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).WriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/writeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).WriteToken(ctx, req.(*Wkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_ReadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).ReadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/readToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).ReadToken(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_DropToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).DropToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/dropToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).DropToken(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_WriteARToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARWrite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).WriteARToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/writeARToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).WriteARToken(ctx, req.(*ARWrite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_ReadARToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).ReadARToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/readARToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).ReadARToken(ctx, req.(*ARRead))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RollbackARToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARRollbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RollbackARToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/rollbackARToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RollbackARToken(ctx, req.(*ARRollbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RollbackDropARToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARRollbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RollbackDropARToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AOSProject_2.Token/rollbackDropARToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RollbackDropARToken(ctx, req.(*ARRollbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Token_ServiceDesc is the grpc.ServiceDesc for Token service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Token_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AOSProject_2.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createToken",
			Handler:    _Token_CreateToken_Handler,
		},
		{
			MethodName: "writeToken",
			Handler:    _Token_WriteToken_Handler,
		},
		{
			MethodName: "readToken",
			Handler:    _Token_ReadToken_Handler,
		},
		{
			MethodName: "dropToken",
			Handler:    _Token_DropToken_Handler,
		},
		{
			MethodName: "writeARToken",
			Handler:    _Token_WriteARToken_Handler,
		},
		{
			MethodName: "readARToken",
			Handler:    _Token_ReadARToken_Handler,
		},
		{
			MethodName: "rollbackARToken",
			Handler:    _Token_RollbackARToken_Handler,
		},
		{
			MethodName: "rollbackDropARToken",
			Handler:    _Token_RollbackDropARToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AOSProject_2/project2.proto",
}
